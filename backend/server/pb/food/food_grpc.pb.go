// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/food.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodServiceClient is the client API for FoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodServiceClient interface {
	ListFoods(ctx context.Context, in *ListFoodRequest, opts ...grpc.CallOption) (*ListFoodResponse, error)
	GetFood(ctx context.Context, in *ReadFoodRequest, opts ...grpc.CallOption) (*ReadFoodResponse, error)
	CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error)
	UpdateFood(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error)
	DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error)
}

type foodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodServiceClient(cc grpc.ClientConnInterface) FoodServiceClient {
	return &foodServiceClient{cc}
}

func (c *foodServiceClient) ListFoods(ctx context.Context, in *ListFoodRequest, opts ...grpc.CallOption) (*ListFoodResponse, error) {
	out := new(ListFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.FoodService/ListFoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) GetFood(ctx context.Context, in *ReadFoodRequest, opts ...grpc.CallOption) (*ReadFoodResponse, error) {
	out := new(ReadFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.FoodService/GetFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) CreateFood(ctx context.Context, in *CreateFoodRequest, opts ...grpc.CallOption) (*CreateFoodResponse, error) {
	out := new(CreateFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.FoodService/CreateFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) UpdateFood(ctx context.Context, in *UpdateFoodRequest, opts ...grpc.CallOption) (*UpdateFoodResponse, error) {
	out := new(UpdateFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.FoodService/UpdateFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodServiceClient) DeleteFood(ctx context.Context, in *DeleteFoodRequest, opts ...grpc.CallOption) (*DeleteFoodResponse, error) {
	out := new(DeleteFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.FoodService/DeleteFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodServiceServer is the server API for FoodService service.
// All implementations should embed UnimplementedFoodServiceServer
// for forward compatibility
type FoodServiceServer interface {
	ListFoods(context.Context, *ListFoodRequest) (*ListFoodResponse, error)
	GetFood(context.Context, *ReadFoodRequest) (*ReadFoodResponse, error)
	CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error)
	UpdateFood(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error)
	DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error)
}

// UnimplementedFoodServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFoodServiceServer struct {
}

func (UnimplementedFoodServiceServer) ListFoods(context.Context, *ListFoodRequest) (*ListFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFoods not implemented")
}
func (UnimplementedFoodServiceServer) GetFood(context.Context, *ReadFoodRequest) (*ReadFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFood not implemented")
}
func (UnimplementedFoodServiceServer) CreateFood(context.Context, *CreateFoodRequest) (*CreateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFood not implemented")
}
func (UnimplementedFoodServiceServer) UpdateFood(context.Context, *UpdateFoodRequest) (*UpdateFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFood not implemented")
}
func (UnimplementedFoodServiceServer) DeleteFood(context.Context, *DeleteFoodRequest) (*DeleteFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFood not implemented")
}

// UnsafeFoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodServiceServer will
// result in compilation errors.
type UnsafeFoodServiceServer interface {
	mustEmbedUnimplementedFoodServiceServer()
}

func RegisterFoodServiceServer(s grpc.ServiceRegistrar, srv FoodServiceServer) {
	s.RegisterService(&FoodService_ServiceDesc, srv)
}

func _FoodService_ListFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).ListFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FoodService/ListFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).ListFoods(ctx, req.(*ListFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_GetFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).GetFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FoodService/GetFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).GetFood(ctx, req.(*ReadFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_CreateFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).CreateFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FoodService/CreateFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).CreateFood(ctx, req.(*CreateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_UpdateFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).UpdateFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FoodService/UpdateFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).UpdateFood(ctx, req.(*UpdateFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodService_DeleteFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServiceServer).DeleteFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FoodService/DeleteFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServiceServer).DeleteFood(ctx, req.(*DeleteFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodService_ServiceDesc is the grpc.ServiceDesc for FoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FoodService",
	HandlerType: (*FoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFoods",
			Handler:    _FoodService_ListFoods_Handler,
		},
		{
			MethodName: "GetFood",
			Handler:    _FoodService_GetFood_Handler,
		},
		{
			MethodName: "CreateFood",
			Handler:    _FoodService_CreateFood_Handler,
		},
		{
			MethodName: "UpdateFood",
			Handler:    _FoodService_UpdateFood_Handler,
		},
		{
			MethodName: "DeleteFood",
			Handler:    _FoodService_DeleteFood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/food.proto",
}
