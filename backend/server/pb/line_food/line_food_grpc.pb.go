// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/line_food.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LineFoodServiceClient is the client API for LineFoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LineFoodServiceClient interface {
	ListLineFoods(ctx context.Context, in *ListLineFoodRequest, opts ...grpc.CallOption) (*ListLineFoodResponse, error)
	CreateLineFood(ctx context.Context, in *CreateLineFoodRequest, opts ...grpc.CallOption) (*CreateLineFoodResponse, error)
	ReplaceLineFood(ctx context.Context, in *ReplaceLineFoodRequest, opts ...grpc.CallOption) (*ReplaceLineFoodResponse, error)
}

type lineFoodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLineFoodServiceClient(cc grpc.ClientConnInterface) LineFoodServiceClient {
	return &lineFoodServiceClient{cc}
}

func (c *lineFoodServiceClient) ListLineFoods(ctx context.Context, in *ListLineFoodRequest, opts ...grpc.CallOption) (*ListLineFoodResponse, error) {
	out := new(ListLineFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.LineFoodService/ListLineFoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineFoodServiceClient) CreateLineFood(ctx context.Context, in *CreateLineFoodRequest, opts ...grpc.CallOption) (*CreateLineFoodResponse, error) {
	out := new(CreateLineFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.LineFoodService/CreateLineFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineFoodServiceClient) ReplaceLineFood(ctx context.Context, in *ReplaceLineFoodRequest, opts ...grpc.CallOption) (*ReplaceLineFoodResponse, error) {
	out := new(ReplaceLineFoodResponse)
	err := c.cc.Invoke(ctx, "/proto.LineFoodService/ReplaceLineFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LineFoodServiceServer is the server API for LineFoodService service.
// All implementations should embed UnimplementedLineFoodServiceServer
// for forward compatibility
type LineFoodServiceServer interface {
	ListLineFoods(context.Context, *ListLineFoodRequest) (*ListLineFoodResponse, error)
	CreateLineFood(context.Context, *CreateLineFoodRequest) (*CreateLineFoodResponse, error)
	ReplaceLineFood(context.Context, *ReplaceLineFoodRequest) (*ReplaceLineFoodResponse, error)
}

// UnimplementedLineFoodServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLineFoodServiceServer struct {
}

func (UnimplementedLineFoodServiceServer) ListLineFoods(context.Context, *ListLineFoodRequest) (*ListLineFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLineFoods not implemented")
}
func (UnimplementedLineFoodServiceServer) CreateLineFood(context.Context, *CreateLineFoodRequest) (*CreateLineFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLineFood not implemented")
}
func (UnimplementedLineFoodServiceServer) ReplaceLineFood(context.Context, *ReplaceLineFoodRequest) (*ReplaceLineFoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceLineFood not implemented")
}

// UnsafeLineFoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LineFoodServiceServer will
// result in compilation errors.
type UnsafeLineFoodServiceServer interface {
	mustEmbedUnimplementedLineFoodServiceServer()
}

func RegisterLineFoodServiceServer(s grpc.ServiceRegistrar, srv LineFoodServiceServer) {
	s.RegisterService(&LineFoodService_ServiceDesc, srv)
}

func _LineFoodService_ListLineFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLineFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineFoodServiceServer).ListLineFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LineFoodService/ListLineFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineFoodServiceServer).ListLineFoods(ctx, req.(*ListLineFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineFoodService_CreateLineFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLineFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineFoodServiceServer).CreateLineFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LineFoodService/CreateLineFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineFoodServiceServer).CreateLineFood(ctx, req.(*CreateLineFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineFoodService_ReplaceLineFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceLineFoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineFoodServiceServer).ReplaceLineFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LineFoodService/ReplaceLineFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineFoodServiceServer).ReplaceLineFood(ctx, req.(*ReplaceLineFoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LineFoodService_ServiceDesc is the grpc.ServiceDesc for LineFoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LineFoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LineFoodService",
	HandlerType: (*LineFoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLineFoods",
			Handler:    _LineFoodService_ListLineFoods_Handler,
		},
		{
			MethodName: "CreateLineFood",
			Handler:    _LineFoodService_CreateLineFood_Handler,
		},
		{
			MethodName: "ReplaceLineFood",
			Handler:    _LineFoodService_ReplaceLineFood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/line_food.proto",
}
